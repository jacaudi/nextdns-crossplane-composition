apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: profiles.nextdns.jacaudi.io
spec:
  compositeTypeRef:
    apiVersion: nextdns.jacaudi.io/v1alpha1
    kind: Profile
  mode: Pipeline
  pipeline:
    - step: render-templates
      functionRef:
        name: crossplane-contrib-function-go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline:
          template: |
            apiVersion: http.crossplane.io/v1alpha2
            kind: Request
            metadata:
              name: {{ .observed.composite.resource.spec.name | lower }}-nextdns-profile
              annotations:
                gotemplating.fn.crossplane.io/composition-resource-name: {{ .observed.composite.resource.spec.name | lower }}-nextdns-profile
            spec:
              providerConfigRef:
                name: http-conf-nextdns
              forProvider:
                payload:
                  baseUrl: https://api.nextdns.io
                headers:
                  Content-Type:
                    - application/json
                  X-Api-Key:
                    - '{{"{{"}} {{ .observed.composite.resource.spec.apiKeySecret.name }}:{{ .observed.composite.resource.spec.apiKeySecret.namespace }}:{{ .observed.composite.resource.spec.apiKeySecret.key }} {{"}}"}}'
                mappings:
                  - method: "POST"
                    url: (.payload.baseUrl + "/profiles")
                    body: |
                      {
                        "name": {{ .observed.composite.resource.spec.name | toJson }}
                      }
                  - method: "PATCH"
                    action: "UPDATE"
                    url: (.payload.baseUrl + "/profiles/" + (.response.body.data.id | tostring))
                    body: |
                      {
                        "name": {{ .observed.composite.resource.spec.name | toJson }}
                        {{- if .observed.composite.resource.spec.security }},
                        "security": {{ .observed.composite.resource.spec.security | toJson }}
                        {{- end }}
                        {{- if .observed.composite.resource.spec.privacy }},
                        "privacy": {
                          {{- if .observed.composite.resource.spec.privacy.allowAffiliate }}
                          "allowAffiliate": {{ .observed.composite.resource.spec.privacy.allowAffiliate }}
                          {{- end }}
                          {{- if .observed.composite.resource.spec.privacy.disguisedTrackers }}
                          {{- if .observed.composite.resource.spec.privacy.allowAffiliate }},{{- end }}
                          "disguisedTrackers": {{ .observed.composite.resource.spec.privacy.disguisedTrackers }}
                          {{- end }}
                          {{- if .observed.composite.resource.spec.privacy.blocklists }}
                          {{- if or .observed.composite.resource.spec.privacy.allowAffiliate .observed.composite.resource.spec.privacy.disguisedTrackers }},{{- end }}
                          "blocklists": [
                            {{- range $i, $blocklist := .observed.composite.resource.spec.privacy.blocklists }}
                            {{- if $i }},{{- end }}
                            {"id": {{ $blocklist | toJson }}}
                            {{- end }}
                          ]
                          {{- end }}
                          {{- if .observed.composite.resource.spec.privacy.natives }}
                          {{- if or .observed.composite.resource.spec.privacy.allowAffiliate .observed.composite.resource.spec.privacy.disguisedTrackers .observed.composite.resource.spec.privacy.blocklists }},{{- end }}
                          "natives": [
                            {{- range $i, $native := .observed.composite.resource.spec.privacy.natives }}
                            {{- if $i }},{{- end }}
                            {"id": {{ $native | toJson }}}
                            {{- end }}
                          ]
                          {{- end }}
                        }
                        {{- end }}
                        {{- if .observed.composite.resource.spec.parentalControl }},
                        "parentalControl": {{ .observed.composite.resource.spec.parentalControl | toJson }}
                        {{- end }}
                        {{- if .observed.composite.resource.spec.denylist }},
                        "denylist": [
                          {{- range $i, $entry := .observed.composite.resource.spec.denylist }}
                          {{- if $i }},{{- end }}
                          {{- if kindIs "string" $entry }}
                          {"id": {{ $entry | toJson }}, "active": true}
                          {{- else }}
                          {{- $domain := "" }}
                          {{- range $key, $value := $entry }}
                          {{- if ne $key "active" }}
                          {{- $domain = $key }}
                          {{- end }}
                          {{- end }}
                          {"id": {{ $domain | toJson }}, "active": {{ $entry.active | default true }}}
                          {{- end }}
                          {{- end }}
                        ]
                        {{- end }}
                        {{- if .observed.composite.resource.spec.allowlist }},
                        "allowlist": [
                          {{- range $i, $entry := .observed.composite.resource.spec.allowlist }}
                          {{- if $i }},{{- end }}
                          {{- if kindIs "string" $entry }}
                          {"id": {{ $entry | toJson }}, "active": true}
                          {{- else }}
                          {{- $domain := "" }}
                          {{- range $key, $value := $entry }}
                          {{- if ne $key "active" }}
                          {{- $domain = $key }}
                          {{- end }}
                          {{- end }}
                          {"id": {{ $domain | toJson }}, "active": {{ $entry.active | default true }}}
                          {{- end }}
                          {{- end }}
                        ]
                        {{- end }}
                        {{- if .observed.composite.resource.spec.settings }},
                        "settings": {{ .observed.composite.resource.spec.settings | toJson }}
                        {{- end }}
                      }
                  - method: "GET"
                    url: (.payload.baseUrl + "/profiles/" + (.response.body.data.id | tostring))
                    body: ""
                  - method: "DELETE"
                    url: (.payload.baseUrl + "/profiles/" + (.response.body.data.id | tostring))
                    body: ""
                secretInjectionConfigs: 
                  - secretRef:
                      name: {{ .observed.composite.resource.spec.name | lower }}-nextdns-config
                      namespace: {{ .observed.composite.resource.metadata.namespace | default "crossplane-system" }}
                    keyMappings:
                      - secretKey: profile-id
                        responseJQ: .body.data.id
                        missingFieldStrategy: preserve
                      - secretKey: ipv4-primary-address
                        responseJQ: .body.data.setup.linkedIp.servers[0]
                        missingFieldStrategy: preserve
                      - secretKey: ipv4-secondary-address
                        responseJQ: .body.data.setup.linkedIp.servers[1]
                        missingFieldStrategy: preserve
                      - secretKey: ipv6-primary-address
                        responseJQ: .body.data.setup.ipv6[0]
                        missingFieldStrategy: preserve
                      - secretKey: ipv6-secondary-address
                        responseJQ: .body.data.setup.ipv6[1]
                        missingFieldStrategy: preserve
                      - secretKey: dnscrypt-config
                        responseJQ: .body.data.setup.dnscrypt
                        missingFieldStrategy: preserve
                    setOwnerReference: true
    - step: automatically-detect-ready-composed-resources
      functionRef:
        name: crossplane-contrib-function-auto-ready